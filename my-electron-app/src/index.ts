import { app, BrowserWindow, screen } from 'electron';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Declare global reference to keep window objects from being garbage collected
let mainWindow: BrowserWindow;
let overlayWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minWidth: 1000,
    minHeight: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Load the app
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools in development
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }

  // Create overlay window after main window
  createOverlayWindow();
};

const createOverlayWindow = (): void => {
  const primaryDisplay = screen.getPrimaryDisplay();
  const { width, height } = primaryDisplay.workAreaSize;
  
  console.log('Screen dimensions:', { width, height }); // Debug log

  overlayWindow = new BrowserWindow({
    width: 300,
    height: 60,
    x: Math.floor((width - 300) / 2), // Center horizontally
    y: height - 80, // Position 80px from bottom (above dock)
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    skipTaskbar: true,
    resizable: false,
    movable: true,
    minimizable: false,
    maximizable: false,
    closable: false,
    focusable: true,
    hasShadow: true,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  // Make it stay on top and visible on all workspaces
  overlayWindow.setVisibleOnAllWorkspaces(true, { visibleOnFullScreen: true });
  overlayWindow.setAlwaysOnTop(true, 'screen-saver', 1);

  // Load the overlay content as a data URL
  overlayWindow.loadURL('data:text/html;charset=utf-8,' + encodeURIComponent(`
  <!DOCTYPE html>
  <html>
  <head>
    <meta charset="UTF-8">
    <title>Overlay</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 30px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 60px;
        width: 300px;
        cursor: pointer;
        transition: all 0.3s ease;
        user-select: none;
        -webkit-app-region: drag;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      }
      
      body:hover {
        transform: scale(1.05);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
      }
      
      .content {
        text-align: center;
        -webkit-app-region: no-drag;
        display: flex;
        align-items: center;
        gap: 15px;
      }
      
      .icon {
        font-size: 28px;
      }
      
      .text {
        font-size: 16px;
        font-weight: 600;
      }
    </style>
  </head>
  <body>
    <div class="content">
      <div class="icon">ðŸŽµ</div>
      <div class="text">Dynamic Island</div>
    </div>

    <script>
      document.body.addEventListener('click', () => {
        alert('Overlay clicked from bottom center!');
      });

      document.body.addEventListener('contextmenu', (e) => {
        e.preventDefault();
        window.close();
      });
    </script>
  </body>
  </html>
  `));

  // Show the window explicitly
  overlayWindow.show();

  // Debug: Log when window is created
  console.log('Overlay window created at position:', overlayWindow.getPosition());
  console.log('Overlay window bounds:', overlayWindow.getBounds());
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
